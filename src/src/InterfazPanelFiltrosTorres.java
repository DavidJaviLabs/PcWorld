package src;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.*;



public class InterfazPanelFiltrosTorres extends javax.swing.JFrame 
{
    /**
     * Creates new form pruebaPanelFiltros
     */
    public InterfazPanelFiltrosTorres() 
    {
        initComponents();
    }
    
    public static InterfazPanelFiltrosTorres getInstancia()
    {
        if(instancia == null)
        {
            instancia = new InterfazPanelFiltrosTorres();
        }
        return instancia;
    }
    public static InterfazPanelFiltrosTorres crearNuevaInstancia() 
    {
        instancia = null;
        return getInstancia();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        checkHp = new javax.swing.JCheckBox();
        checkMsi = new javax.swing.JCheckBox();
        checkPcWor = new javax.swing.JCheckBox();
        logoMsi = new javax.swing.JLabel();
        logoHp = new javax.swing.JLabel();
        pcWor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelPrincipal.setBackground(new java.awt.Color(247, 224, 136));

        checkHp.setBackground(new java.awt.Color(247, 224, 136));
        checkHp.setText("HP");
        checkHp.setFocusable(false);
        checkHp.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkHp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkHpItemStateChanged(evt);
            }
        });

        checkMsi.setBackground(new java.awt.Color(247, 224, 136));
        checkMsi.setText("MSI");
        checkMsi.setFocusable(false);
        checkMsi.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkMsi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkMsiItemStateChanged(evt);
            }
        });

        checkPcWor.setBackground(new java.awt.Color(247, 224, 136));
        checkPcWor.setText("PCWOR");
        checkPcWor.setFocusable(false);
        checkPcWor.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkPcWor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkPcWorItemStateChanged(evt);
            }
        });

        logoMsi.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "logoMsi.png"));
        logoMsi.setText(" ");
        logoMsi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoMsiMouseClicked(evt);
            }
        });

        logoHp.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "logoHp.png"));
        logoHp.setText(" ");
        logoHp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoHpMouseClicked(evt);
            }
        });

        pcWor.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "logoPcWor.png"));
        pcWor.setText(" ");
        pcWor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pcWorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addComponent(checkHp, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logoHp))
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addComponent(checkMsi, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logoMsi)))
                        .addGap(80, 199, Short.MAX_VALUE))
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(checkPcWor, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pcWor)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkHp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoHp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkMsi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoMsi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkPcWor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pcWor))
                .addGap(171, 171, 171))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkHpItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkHpItemStateChanged
        
        if (checkHp.isSelected()) 
        {
            checkHp.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
            
        } else 
        {
            checkHp.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        }
        buscarFiltros();
    }//GEN-LAST:event_checkHpItemStateChanged

    private void checkMsiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkMsiItemStateChanged
        if (checkMsi.isSelected()) 
        {
            checkMsi.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
        } else 
        {
            checkMsi.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        }
        buscarFiltros();
    }//GEN-LAST:event_checkMsiItemStateChanged

    private void checkPcWorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkPcWorItemStateChanged
        if (checkPcWor.isSelected()) 
        {
            checkPcWor.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
        } else 
        {
            checkPcWor.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        }
        buscarFiltros();
    }//GEN-LAST:event_checkPcWorItemStateChanged

    
    
    public void buscarFiltros() {
        InterfazMostrarProductos.getInstancia().panelProductos = null;
        InterfazMostrarProductos.getInstancia().panelProductos = new JPanel(new GridLayout(0,3, 20,38));
        InterfazMostrarProductos.getInstancia().panelProductos.setBackground(Color.WHITE);
        InterfazMostrarProductos.getInstancia().scrollPane.setViewportView(InterfazMostrarProductos.getInstancia().panelProductos);
        try {
                // Establecer la conexi√≥n a la base de datos
                Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");

                // Recopilar los nombres de las marcas seleccionadas
                ArrayList<String> marcasSeleccionadas = new ArrayList<>();
                if (checkHp.isSelected()) 
                    marcasSeleccionadas.add("HP");
                if (checkMsi.isSelected()) 
                    marcasSeleccionadas.add("MSI");
                if (checkPcWor.isSelected()) 
                    marcasSeleccionadas.add("PcWor");
                
                if(marcasSeleccionadas.isEmpty())
                {
                    InterfazMostrarProductos.getInstancia().cargarProductosDesdeBD();
                }
                else
                {
                    // Construir la consulta SQL din√°mica
                    StringBuilder consulta = new StringBuilder("SELECT * FROM productos WHERE tipoProducto = 'Torre' AND (");
                    for (int i = 0; i < marcasSeleccionadas.size(); i++) {
                        consulta.append("IdNombre LIKE ?");
                        if (i < marcasSeleccionadas.size() - 1) {
                            consulta.append(" OR ");
                        }
                    }
                    
                    if(InterfazMostrarProductos.getInstancia().checkAscendente.isSelected())
                    {
                        consulta.append(") ORDER BY precioProducto ASC");
                    }else if(InterfazMostrarProductos.getInstancia().checkDescendente.isSelected())
                    {
                        consulta.append(") ORDER BY precioProducto DESC");
                    }else
                    {
                        consulta.append(")");
                    }
                    // Preparar la consulta
                    PreparedStatement pstmt = cn.prepareStatement(consulta.toString());

                    // Establecer los par√°metros de la consulta
                    for (int i = 0; i < marcasSeleccionadas.size(); i++) {
                        pstmt.setString(i + 1, "%" + marcasSeleccionadas.get(i) + "%");
                    }

                    // Ejecutar la consulta
                    ResultSet rs = pstmt.executeQuery();

                    // Procesar los resultados
                    while (rs.next())
                    {
                        cargarProductosDesdeBD(rs.getString("IdNombre"));
                    }       
                }
                cn.close();
                
            } catch(Exception e) {
                System.out.println("Error: " + e);
            }
        InterfazMostrarProductos.getInstancia().scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        InterfazMostrarProductos.getInstancia().scrollPane.setViewportView(InterfazMostrarProductos.getInstancia().panelProductos);
        InterfazMostrarProductos.getInstancia().panelPrincipal.requestFocusInWindow();
        // Obtener la vista del JViewport
        JViewport viewport = InterfazMostrarProductos.getInstancia().scrollPane.getViewport();

        // Establecer la posici√≥n de la vista en la parte superior
        SwingUtilities.invokeLater(() -> {
            viewport.setViewPosition(new Point(0, 0));
        });
    }
    
    public void cargarProductosDesdeBD(String nombre)
    {
        try {
            String rutaImagenPortada = "Imagenes" + File.separator + "Portada" + File.separator;
            Connection cn = InterfazMostrarProductos.getInstancia().conectarBD();

            ResultSet rsProducto;
            rsProducto = InterfazMostrarProductos.getInstancia().cargarProductosSegunFiltroMarca(cn, nombre);

            while (rsProducto.next())
            {
                Producto producto = InterfazMostrarProductos.getInstancia().crearProductoDesdeResultSet(rsProducto, rutaImagenPortada);
                InterfazMostrarProductos.getInstancia().actualizarValoresSliders((int) producto.getPrecio());
                InterfazMostrarProductos.getInstancia().crearPanelYActualizarInterfaz(producto);
            }

            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } 
    }
    
    private void logoMsiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoMsiMouseClicked
        checkMsi.setSelected(!checkMsi.isSelected());
        checkMsiItemStateChanged(new ItemEvent(checkMsi, ItemEvent.SELECTED, checkMsi, ItemEvent.SELECTED));
    }//GEN-LAST:event_logoMsiMouseClicked

    private void logoHpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoHpMouseClicked
        checkHp.setSelected(!checkHp.isSelected());
        checkHpItemStateChanged(new ItemEvent(checkHp, ItemEvent.SELECTED, checkHp, ItemEvent.SELECTED));
    }//GEN-LAST:event_logoHpMouseClicked

    private void pcWorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pcWorMouseClicked
        checkPcWor.setSelected(!checkPcWor.isSelected());
        checkHpItemStateChanged(new ItemEvent(checkPcWor, ItemEvent.SELECTED, checkPcWor, ItemEvent.SELECTED));
    }//GEN-LAST:event_pcWorMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JCheckBox checkHp;
    public javax.swing.JCheckBox checkMsi;
    public javax.swing.JCheckBox checkPcWor;
    private javax.swing.JLabel logoHp;
    private javax.swing.JLabel logoMsi;
    public javax.swing.JPanel panelPrincipal;
    private javax.swing.JLabel pcWor;
    // End of variables declaration//GEN-END:variables
    private static InterfazPanelFiltrosTorres instancia;
}
