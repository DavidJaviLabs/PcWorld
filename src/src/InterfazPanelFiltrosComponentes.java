package src;

import java.awt.*;
import java.io.*;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.*;

public class InterfazPanelFiltrosComponentes extends javax.swing.JFrame 
{
    /**
     * Creates new form pruebaPanelFiltros
     */
    public InterfazPanelFiltrosComponentes() 
    {
        initComponents();
    }
    
    public static InterfazPanelFiltrosComponentes getInstancia()
    {
        if(instancia == null)
        {
            instancia = new InterfazPanelFiltrosComponentes();
        }
        return instancia;
    }
    public static InterfazPanelFiltrosComponentes crearNuevaInstancia() 
    {
        instancia = null;
        return getInstancia();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        checkCPU = new javax.swing.JCheckBox();
        checkDiscoDuro = new javax.swing.JCheckBox();
        checkFuenteAlimentacion = new javax.swing.JCheckBox();
        checkRam = new javax.swing.JCheckBox();
        checkPlacaBase = new javax.swing.JCheckBox();
        checkRefrigeracion = new javax.swing.JCheckBox();
        checkTarjetaGrafica = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelPrincipal.setBackground(new java.awt.Color(247, 224, 136));

        checkCPU.setBackground(new java.awt.Color(247, 224, 136));
        checkCPU.setText("CPU");
        checkCPU.setFocusable(false);
        checkCPU.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkCPU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkCPUItemStateChanged(evt);
            }
        });

        checkDiscoDuro.setBackground(new java.awt.Color(247, 224, 136));
        checkDiscoDuro.setText("DISCO DURO");
        checkDiscoDuro.setFocusable(false);
        checkDiscoDuro.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkDiscoDuro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkDiscoDuroItemStateChanged(evt);
            }
        });

        checkFuenteAlimentacion.setBackground(new java.awt.Color(247, 224, 136));
        checkFuenteAlimentacion.setText("FUENTE DE ALIMENTACIÓN");
        checkFuenteAlimentacion.setFocusable(false);
        checkFuenteAlimentacion.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkFuenteAlimentacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkFuenteAlimentacionItemStateChanged(evt);
            }
        });

        checkRam.setBackground(new java.awt.Color(247, 224, 136));
        checkRam.setText("RAM");
        checkRam.setFocusable(false);
        checkRam.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkRam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkRamItemStateChanged(evt);
            }
        });

        checkPlacaBase.setBackground(new java.awt.Color(247, 224, 136));
        checkPlacaBase.setText("PLACA BASE");
        checkPlacaBase.setFocusable(false);
        checkPlacaBase.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkPlacaBase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkPlacaBaseItemStateChanged(evt);
            }
        });

        checkRefrigeracion.setBackground(new java.awt.Color(247, 224, 136));
        checkRefrigeracion.setText("REFRIGERACIÓN");
        checkRefrigeracion.setFocusable(false);
        checkRefrigeracion.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkRefrigeracion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkRefrigeracionItemStateChanged(evt);
            }
        });

        checkTarjetaGrafica.setBackground(new java.awt.Color(247, 224, 136));
        checkTarjetaGrafica.setText("TARJETA GRÁFICA");
        checkTarjetaGrafica.setFocusable(false);
        checkTarjetaGrafica.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkTarjetaGrafica.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkTarjetaGraficaItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(checkCPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkDiscoDuro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkRefrigeracion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkTarjetaGrafica, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkRam, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkFuenteAlimentacion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkPlacaBase, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 142, Short.MAX_VALUE))
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(checkCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkDiscoDuro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkRam, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkRefrigeracion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkTarjetaGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkFuenteAlimentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkPlacaBase, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkCPUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkCPUItemStateChanged
        if (checkCPU.isSelected()) 
        {
            checkCPU.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "ImagenesDecoracion" + File.separator + "check.png"));
            buscarFiltros();
        } else 
        {
            checkCPU.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
            buscarFiltros();
        }
    }//GEN-LAST:event_checkCPUItemStateChanged

    private void checkDiscoDuroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkDiscoDuroItemStateChanged
        if (checkDiscoDuro.isSelected()) 
        {
            checkDiscoDuro.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "ImagenesDecoracion" + File.separator + "check.png"));
            buscarFiltros();
        } else 
        {
            checkDiscoDuro.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
            buscarFiltros();
        }
    }//GEN-LAST:event_checkDiscoDuroItemStateChanged

    private void checkRamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkRamItemStateChanged
        if (checkRam.isSelected()) 
        {
            checkRam.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
            buscarFiltros();
        } else 
        {
            checkRam.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
            buscarFiltros();
        }
    }//GEN-LAST:event_checkRamItemStateChanged

    private void checkRefrigeracionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkRefrigeracionItemStateChanged
        if (checkRefrigeracion.isSelected()) 
        {
            checkRefrigeracion.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
            buscarFiltros();
        } else 
        {
            checkRefrigeracion.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
            buscarFiltros();
        }
    }//GEN-LAST:event_checkRefrigeracionItemStateChanged

    private void checkTarjetaGraficaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkTarjetaGraficaItemStateChanged
        if (checkTarjetaGrafica.isSelected()) 
        {
            checkTarjetaGrafica.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
            buscarFiltros();
        } else 
        {
            checkTarjetaGrafica.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
            buscarFiltros();
        }
    }//GEN-LAST:event_checkTarjetaGraficaItemStateChanged

    private void checkFuenteAlimentacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkFuenteAlimentacionItemStateChanged
        if (checkFuenteAlimentacion.isSelected()) 
        {
            checkFuenteAlimentacion.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
            buscarFiltros();
        } else 
        {
            checkFuenteAlimentacion.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
            buscarFiltros();
        }
    }//GEN-LAST:event_checkFuenteAlimentacionItemStateChanged

    private void checkPlacaBaseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkPlacaBaseItemStateChanged
        if (checkPlacaBase.isSelected()) 
        {
            checkPlacaBase.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
            buscarFiltros();
        } else 
        {
            checkPlacaBase.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
            buscarFiltros();
        }
    }//GEN-LAST:event_checkPlacaBaseItemStateChanged

    public void buscarFiltros() {
        InterfazMostrarProductos.getInstancia().panelProductos = null;
        InterfazMostrarProductos.getInstancia().panelProductos = new JPanel(new GridLayout(0,3, 20,38));
        InterfazMostrarProductos.getInstancia().panelProductos.setBackground(Color.WHITE);
        InterfazMostrarProductos.getInstancia().scrollPane.setViewportView(InterfazMostrarProductos.getInstancia().panelProductos);
        try {
                // Establecer la conexión a la base de datos
                Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");

                // Recopilar los nombres de las marcas seleccionadas
                ArrayList<String> tiposSeleccionados = new ArrayList<>();
                if (checkCPU.isSelected()) 
                    tiposSeleccionados.add("CPU");
                if (checkDiscoDuro.isSelected()) 
                    tiposSeleccionados.add("Disco duro");
                if (checkFuenteAlimentacion.isSelected()) 
                    tiposSeleccionados.add("Fuente alimentación");
                if (checkRam.isSelected()) 
                    tiposSeleccionados.add("Memoria RAM");
                if (checkPlacaBase.isSelected()) 
                    tiposSeleccionados.add("Placa base");
                if (checkRefrigeracion.isSelected()) 
                    tiposSeleccionados.add("Refrigeracion");
                if (checkTarjetaGrafica.isSelected()) 
                    tiposSeleccionados.add("Tarjeta Grafica");
                if(tiposSeleccionados.isEmpty())
                {
                    InterfazMostrarProductos.getInstancia().cargarProductosDesdeBD();
                }
                else{
                    // Construir la consulta SQL dinámica
                    StringBuilder consulta = new StringBuilder("SELECT * FROM productos WHERE ( ");
                    for (int i = 0; i < tiposSeleccionados.size(); i++) {
                        consulta.append("tipoProducto = ?");
                        if (i < tiposSeleccionados.size() - 1) {
                            consulta.append(" OR ");
                        }
                    }

                    if(InterfazMostrarProductos.getInstancia().checkAscendente.isSelected())
                    {
                        consulta.append(") ORDER BY precioProducto ASC");
                    }else if(InterfazMostrarProductos.getInstancia().checkDescendente.isSelected())
                    {
                        consulta.append(") ORDER BY precioProducto DESC");
                    }else
                    {
                        consulta.append(")");
                    }
                    // Preparar la consulta
                    PreparedStatement pstmt = cn.prepareStatement(consulta.toString());

                    // Establecer los parámetros de la consulta
                    for (int i = 0; i < tiposSeleccionados.size(); i++) {
                        pstmt.setString(i + 1, tiposSeleccionados.get(i));
                    }

                    // Ejecutar la consulta
                    ResultSet rs = pstmt.executeQuery();

                    // Procesar los resultados
                    while (rs.next())
                    {
                        cargarProductosDesdeBD(rs.getString("IdNombre"));
                    } 
                }
                cn.close();
            } catch(Exception e) {
                System.out.println("Error: " + e);
            }
        InterfazMostrarProductos.getInstancia().scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        InterfazMostrarProductos.getInstancia().scrollPane.setViewportView(InterfazMostrarProductos.getInstancia().panelProductos);
        InterfazMostrarProductos.getInstancia().panelPrincipal.requestFocusInWindow();
        // Obtener la vista del JViewport
        JViewport viewport = InterfazMostrarProductos.getInstancia().scrollPane.getViewport();

        // Establecer la posición de la vista en la parte superior
        SwingUtilities.invokeLater(() -> {
            viewport.setViewPosition(new Point(0, 0));
        });
    }
    
    public void cargarProductosDesdeBD(String nombre)
    {
        try {
            String rutaImagenPortada = "Imagenes" + File.separator + "Portada" + File.separator;
            Connection cn = InterfazMostrarProductos.getInstancia().conectarBD();

            ResultSet rsProducto;
            rsProducto = InterfazMostrarProductos.getInstancia().cargarProductosSegunFiltroMarca(cn, nombre);

            while (rsProducto.next())
            {
                Producto producto = InterfazMostrarProductos.getInstancia().crearProductoDesdeResultSet(rsProducto, rutaImagenPortada);
                InterfazMostrarProductos.getInstancia().actualizarValoresSliders((int) producto.getPrecio());
                InterfazMostrarProductos.getInstancia().crearPanelYActualizarInterfaz(producto);
            }

            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JCheckBox checkCPU;
    public javax.swing.JCheckBox checkDiscoDuro;
    public javax.swing.JCheckBox checkFuenteAlimentacion;
    public javax.swing.JCheckBox checkPlacaBase;
    public javax.swing.JCheckBox checkRam;
    public javax.swing.JCheckBox checkRefrigeracion;
    public javax.swing.JCheckBox checkTarjetaGrafica;
    public javax.swing.JPanel panelPrincipal;
    // End of variables declaration//GEN-END:variables
    private static InterfazPanelFiltrosComponentes instancia;
}
