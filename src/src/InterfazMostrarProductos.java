package src;

import ErroresInterfaz.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.sql.*;
import java.text.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;

public class InterfazMostrarProductos extends javax.swing.JFrame 
{
    /**
     * Creates new form InterfazMostrarProductos
     */
    public InterfazMostrarProductos() 
    {
        initComponents();
        
        productoUser = false;
        error = new ErrorCesta();
        MIN_VALUE = 9999;
        MAX_VALUE = 1;
        
        panelPrincipal.requestFocusInWindow();
        panelProductos = new JPanel(new GridLayout(0,3,20,38));
        panelProductos.setBackground(Color.WHITE);
        
        cargarProductosDesdeBD();
        
        scrollPaneArriba();
    }
    
    public static InterfazMostrarProductos getInstancia()
    {
        if(instancia == null)
        {
            instancia = new InterfazMostrarProductos();
        }
        return instancia;
    }
    public static InterfazMostrarProductos crearNuevaInstancia() 
    {
        instancia = null;
        return getInstancia();
    }
    
    private void cerrar()
    {
        dispose();
        InterfazPrincipal.getInstancia().tipoMostrarProducto = "";
        InterfazCesta.getInstancia().campoBusqueda.setText("   Buscar...");
        InterfazListaDeseos.getInstancia().campoBusqueda.setText("   Buscar...");
        InterfazProducto.getInstancia().campoBusqueda.setText("   Buscar...");
        InterfazPrincipal.getInstancia().campoBusqueda.setText("   Buscar...");
        InterfazConfiguradorPcs.getInstancia().campoBusqueda.setText("   Buscar...");
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popUpMenu = new javax.swing.JPopupMenu();
        popupMenu = new javax.swing.JPopupMenu();
        panelPrincipal = new javax.swing.JPanel();
        panelCabecera = new javax.swing.JPanel();
        panelHome = new javax.swing.JPanel();
        labelLogo = new javax.swing.JLabel();
        panelBuscador = new javax.swing.JPanel();
        campoBusqueda = new javax.swing.JTextField();
        botonLupa = new javax.swing.JButton();
        panelFuncionalidades = new javax.swing.JPanel();
        botonCuenta = new javax.swing.JButton();
        botonListaDeseos = new javax.swing.JButton();
        botonCesta = new javax.swing.JButton();
        panelCuerpo = new javax.swing.JPanel();
        panelFiltros = new javax.swing.JPanel();
        labelTextoMinimo = new javax.swing.JLabel();
        labelTextoMaximo = new javax.swing.JLabel();
        sliderMinimoPrecio = new javax.swing.JSlider();
        sliderMaximoPrecio = new javax.swing.JSlider();
        labelMaximoPrecio = new javax.swing.JLabel(formatPrice(MAX_VALUE));
        labelMinimoPrecio = new javax.swing.JLabel(formatPrice(MIN_VALUE));
        jSeparator1 = new javax.swing.JSeparator();
        panelFiltrosPers = new javax.swing.JPanel();
        panelOrdenar = new javax.swing.JPanel();
        checkAscendente = new javax.swing.JCheckBox();
        checkDescendente = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        scrollPane = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panelPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        panelPrincipal.setForeground(new java.awt.Color(255, 255, 255));

        panelHome.setBackground(new java.awt.Color(102, 255, 102));

        labelLogo.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "logoPrinc.png"));
        labelLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelLogoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelHomeLayout = new javax.swing.GroupLayout(panelHome);
        panelHome.setLayout(panelHomeLayout);
        panelHomeLayout.setHorizontalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHomeLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(labelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelHomeLayout.setVerticalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelBuscador.setBackground(new java.awt.Color(102, 255, 102));

        campoBusqueda.setForeground(new java.awt.Color(153, 153, 153));
        campoBusqueda.setText("   Buscar...");
        campoBusqueda.setBorder(null);
        campoBusqueda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                campoBusquedaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                campoBusquedaFocusLost(evt);
            }
        });
        campoBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campoBusquedaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoBusquedaKeyReleased(evt);
            }
        });

        botonLupa.setBackground(new java.awt.Color(255, 255, 255));
        botonLupa.setForeground(new java.awt.Color(255, 255, 255));
        botonLupa.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "lupa.png"));
        botonLupa.setBorder(null);
        botonLupa.setBorderPainted(false);
        botonLupa.setFocusPainted(false);
        botonLupa.setFocusable(false);
        botonLupa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonLupaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonLupaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                botonLupaMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout panelBuscadorLayout = new javax.swing.GroupLayout(panelBuscador);
        panelBuscador.setLayout(panelBuscadorLayout);
        panelBuscadorLayout.setHorizontalGroup(
            panelBuscadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBuscadorLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(campoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(botonLupa, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        panelBuscadorLayout.setVerticalGroup(
            panelBuscadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBuscadorLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(panelBuscadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonLupa, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        panelFuncionalidades.setBackground(new java.awt.Color(102, 255, 102));

        botonCuenta.setText("Cuenta");
        botonCuenta.setFocusable(false);
        botonCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCuentaActionPerformed(evt);
            }
        });

        botonListaDeseos.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "listaDeseos.png"));
        botonListaDeseos.setFocusable(false);
        botonListaDeseos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonListaDeseosMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                botonListaDeseosMouseReleased(evt);
            }
        });
        botonListaDeseos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListaDeseosActionPerformed(evt);
            }
        });

        botonCesta.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "carrito.png"));
        botonCesta.setFocusPainted(false);
        botonCesta.setFocusable(false);
        botonCesta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonCestaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                botonCestaMouseReleased(evt);
            }
        });
        botonCesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCestaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFuncionalidadesLayout = new javax.swing.GroupLayout(panelFuncionalidades);
        panelFuncionalidades.setLayout(panelFuncionalidadesLayout);
        panelFuncionalidadesLayout.setHorizontalGroup(
            panelFuncionalidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFuncionalidadesLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(botonCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(botonListaDeseos, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonCesta, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelFuncionalidadesLayout.setVerticalGroup(
            panelFuncionalidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFuncionalidadesLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(panelFuncionalidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonListaDeseos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonCesta, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelCabeceraLayout = new javax.swing.GroupLayout(panelCabecera);
        panelCabecera.setLayout(panelCabeceraLayout);
        panelCabeceraLayout.setHorizontalGroup(
            panelCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCabeceraLayout.createSequentialGroup()
                .addComponent(panelHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelFuncionalidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelCabeceraLayout.setVerticalGroup(
            panelCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCabeceraLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(panelCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelHome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBuscador, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelFuncionalidades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        panelFiltros.setBackground(new java.awt.Color(247, 224, 136));

        labelTextoMinimo.setText("Precio mínimo: ");

        labelTextoMaximo.setText("Precio máximo:");

        sliderMinimoPrecio.setBackground(new java.awt.Color(247, 224, 136));
        sliderMinimoPrecio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMinimoPrecioStateChanged(evt);
            }
        });
        sliderMinimoPrecio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderMinimoPrecioMouseReleased(evt);
            }
        });

        sliderMaximoPrecio.setBackground(new java.awt.Color(247, 224, 136));
        sliderMaximoPrecio.setForeground(new java.awt.Color(0, 0, 0));
        sliderMaximoPrecio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMaximoPrecioStateChanged(evt);
            }
        });
        sliderMaximoPrecio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderMaximoPrecioMouseReleased(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        panelFiltrosPers.setBackground(new java.awt.Color(247, 224, 136));

        javax.swing.GroupLayout panelFiltrosPersLayout = new javax.swing.GroupLayout(panelFiltrosPers);
        panelFiltrosPers.setLayout(panelFiltrosPersLayout);
        panelFiltrosPersLayout.setHorizontalGroup(
            panelFiltrosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelFiltrosPersLayout.setVerticalGroup(
            panelFiltrosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 264, Short.MAX_VALUE)
        );

        panelOrdenar.setBackground(new java.awt.Color(247, 224, 136));

        checkAscendente.setBackground(new java.awt.Color(247, 224, 136));
        checkAscendente.setText("Precio Ascendente");
        checkAscendente.setFocusable(false);
        checkAscendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkAscendente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkAscendenteMouseClicked(evt);
            }
        });

        checkDescendente.setBackground(new java.awt.Color(247, 224, 136));
        checkDescendente.setText("Precio Descendente");
        checkDescendente.setFocusable(false);
        checkDescendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkDescendente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkDescendenteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelOrdenarLayout = new javax.swing.GroupLayout(panelOrdenar);
        panelOrdenar.setLayout(panelOrdenarLayout);
        panelOrdenarLayout.setHorizontalGroup(
            panelOrdenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOrdenarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOrdenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkAscendente)
                    .addComponent(checkDescendente))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelOrdenarLayout.setVerticalGroup(
            panelOrdenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOrdenarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkAscendente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkDescendente)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout panelFiltrosLayout = new javax.swing.GroupLayout(panelFiltros);
        panelFiltros.setLayout(panelFiltrosLayout);
        panelFiltrosLayout.setHorizontalGroup(
            panelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTextoMinimo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelTextoMaximo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelFiltrosLayout.createSequentialGroup()
                        .addComponent(sliderMinimoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelMinimoPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                    .addGroup(panelFiltrosLayout.createSequentialGroup()
                        .addComponent(sliderMaximoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelMaximoPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFiltrosLayout.createSequentialGroup()
                        .addGroup(panelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelFiltrosPers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelOrdenar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
            .addGroup(panelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelFiltrosLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSeparator2)
                    .addContainerGap()))
        );
        panelFiltrosLayout.setVerticalGroup(
            panelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltrosLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(labelTextoMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderMinimoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMinimoPrecio))
                .addGap(30, 30, 30)
                .addComponent(labelTextoMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderMaximoPrecio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMaximoPrecio, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(68, 68, 68)
                .addComponent(panelFiltrosPers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(panelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelFiltrosLayout.createSequentialGroup()
                    .addGap(210, 210, 210)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(460, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1091, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 697, Short.MAX_VALUE)
        );

        scrollPane.setViewportView(jPanel3);

        javax.swing.GroupLayout panelCuerpoLayout = new javax.swing.GroupLayout(panelCuerpo);
        panelCuerpo.setLayout(panelCuerpoLayout);
        panelCuerpoLayout.setHorizontalGroup(
            panelCuerpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCuerpoLayout.createSequentialGroup()
                .addComponent(panelFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1094, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        panelCuerpoLayout.setVerticalGroup(
            panelCuerpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFiltros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scrollPane)
        );

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelCabecera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelCuerpo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addComponent(panelCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelCuerpo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public Connection conectarBD() throws SQLException 
    {
        return DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");
    }
    
    public ResultSet cargarProductosSegunTipo(Connection cn, String tipoMostrarProducto) throws SQLException 
    {
        String sql = "SELECT * FROM productos WHERE `tipoProducto` = ?  AND `oculto` = ?";
        if (checkAscendente.isSelected()) {
            sql += " ORDER BY precioProducto ASC";
        } else if (checkDescendente.isSelected()) {
            sql += " ORDER BY precioProducto DESC";
        }
        PreparedStatement pstmtProducto = cn.prepareStatement(sql);
        pstmtProducto.setString(1, tipoMostrarProducto);
        pstmtProducto.setString(2, "0");
        return pstmtProducto.executeQuery();
    }
    
    public ResultSet cargarProductosSegunNombre(Connection cn, String nombre) throws SQLException 
    {
        String sql = "SELECT * FROM productos WHERE `IdNombre` LIKE ?  AND `oculto` = ?";
        
        if (checkAscendente.isSelected()) {
            sql += " ORDER BY precioProducto ASC";
        } else if (checkDescendente.isSelected()) {
            sql += " ORDER BY precioProducto DESC";
        }
        PreparedStatement pstmtProducto = cn.prepareStatement(sql);
        pstmtProducto.setString(1, "%" + nombre + "%");
        pstmtProducto.setString(2, "0");
        return pstmtProducto.executeQuery();
    }
    
    public ResultSet cargarProductosSegunPrecioNombre(Connection cn, String nombre) throws SQLException 
    {
        String minimoPrecioTexto = labelMinimoPrecio.getText();
        String maximoPrecioTexto = labelMaximoPrecio.getText();

        // Eliminar caracteres no numéricos
        String minimoPrecioNumerico = minimoPrecioTexto.replaceAll("[^\\d]", "");
        String maximoPrecioNumerico = maximoPrecioTexto.replaceAll("[^\\d]", "");

        // Convertir los strings numéricos a double
        double minimoPrecio = Double.parseDouble(minimoPrecioNumerico);
        double maximoPrecio = Double.parseDouble(maximoPrecioNumerico);

        // Preparar la consulta SQL
        String sql = "SELECT * FROM productos WHERE (`IdNombre` LIKE ?) AND (`precioProducto` BETWEEN ? AND ?) AND (`oculto` = ?)";
        PreparedStatement pstmtProducto = null;
        
        // Recopilar los nombres de las marcas seleccionadas
        ArrayList<String> tiposSeleccionados = new ArrayList<>();
        if (InterfazPanelFiltrosNombres.getInstancia().checkCPU.isSelected()) 
            tiposSeleccionados.add("CPU");
        if (InterfazPanelFiltrosNombres.getInstancia().checkDiscoDuro.isSelected()) 
            tiposSeleccionados.add("Disco duro");
        if (InterfazPanelFiltrosNombres.getInstancia().checkFuenteAlimentacion.isSelected()) 
            tiposSeleccionados.add("Fuente alimentación");
        if (InterfazPanelFiltrosNombres.getInstancia().checkRam.isSelected()) 
            tiposSeleccionados.add("Memoria RAM");
        if (InterfazPanelFiltrosNombres.getInstancia().checkPlacaBase.isSelected()) 
            tiposSeleccionados.add("Placa base");
        if (InterfazPanelFiltrosNombres.getInstancia().checkRefrigeracion.isSelected()) 
            tiposSeleccionados.add("Refrigeracion");
        if (InterfazPanelFiltrosNombres.getInstancia().checkTarjetaGrafica.isSelected()) 
            tiposSeleccionados.add("Tarjeta Grafica");
        if (InterfazPanelFiltrosNombres.getInstancia().checkPortatil.isSelected()) 
            tiposSeleccionados.add("Portatil");
        if (InterfazPanelFiltrosNombres.getInstancia().checkTorre.isSelected()) 
            tiposSeleccionados.add("Torre");
        if(tiposSeleccionados.isEmpty())
        {
            if(checkAscendente.isSelected())
            {
                sql += " ORDER BY precioProducto ASC";
            }else if(checkDescendente.isSelected())
            {
                sql += "ORDER BY precioProducto DESC";
            }
            pstmtProducto = cn.prepareStatement(sql);
            pstmtProducto.setString(1, "%" + nombre + "%");
            pstmtProducto.setDouble(2, minimoPrecio);
            pstmtProducto.setDouble(3, maximoPrecio);
            pstmtProducto.setString(4, "0");
        }
        else
        {
            // Construir la consulta SQL dinámica
            StringBuilder consulta = new StringBuilder(sql + " AND (");
            for (int i = 0; i < tiposSeleccionados.size(); i++) {
                consulta.append("tipoProducto = ?");
                if (i < tiposSeleccionados.size() - 1) {
                    consulta.append(" OR ");
                }
            }
            if(checkAscendente.isSelected())
            {
                consulta.append(") ORDER BY precioProducto ASC");
            }else if(checkDescendente.isSelected())
            {
                consulta.append(") ORDER BY precioProducto DESC");
            }else
            {
                consulta.append(")");
            }

            // Preparar la consulta
            pstmtProducto = cn.prepareStatement(consulta.toString());
            pstmtProducto.setString(1, "%" + nombre + "%");
            pstmtProducto.setDouble(2, minimoPrecio);
            pstmtProducto.setDouble(3, maximoPrecio);
            pstmtProducto.setString(4, "0");
            // Establecer los parámetros de la consulta
            for (int i = 0; i < tiposSeleccionados.size(); i++) {
                pstmtProducto.setString(i + 5, tiposSeleccionados.get(i));
            }
        }
        // Ejecutar la consulta y devolver el resultado
        return pstmtProducto.executeQuery();
    }
    
    public ResultSet cargarProductosSegunPrecio(Connection cn, String tipoMostrarProducto) throws SQLException 
    {
        String minimoPrecioTexto = labelMinimoPrecio.getText();
        String maximoPrecioTexto = labelMaximoPrecio.getText();

        // Eliminar caracteres no numéricos
        String minimoPrecioNumerico = minimoPrecioTexto.replaceAll("[^\\d]", "");
        String maximoPrecioNumerico = maximoPrecioTexto.replaceAll("[^\\d]", "");

        // Convertir los strings numéricos a double
        double minimoPrecio = Double.parseDouble(minimoPrecioNumerico);
        double maximoPrecio = Double.parseDouble(maximoPrecioNumerico);

        // Preparar la consulta SQL
        String sql = "SELECT * FROM productos WHERE (`tipoProducto` = ?) AND (`precioProducto` BETWEEN ? AND ?) AND (`oculto` = ?)";
        PreparedStatement pstmtProducto = null;
        
        // Recopilar los nombres de las marcas seleccionadas
        ArrayList<String> marcasSeleccionadas = new ArrayList<>();
        if (InterfazPanelFiltrosPortatiles.getInstancia().checkAcer.isSelected()) 
            marcasSeleccionadas.add("Acer");
        if (InterfazPanelFiltrosPortatiles.getInstancia().checkAlurin.isSelected()) 
            marcasSeleccionadas.add("Alurin");
        if (InterfazPanelFiltrosPortatiles.getInstancia().checkAsus.isSelected()) 
            marcasSeleccionadas.add("Asus");
        if (InterfazPanelFiltrosPortatiles.getInstancia().checkDell.isSelected()) 
            marcasSeleccionadas.add("Dell");
        if (InterfazPanelFiltrosPortatiles.getInstancia().checkLenovo.isSelected()) 
            marcasSeleccionadas.add("Lenovo");
        if (InterfazPanelFiltrosPortatiles.getInstancia().checkMsi.isSelected())
            marcasSeleccionadas.add("MSI");
        if (InterfazPanelFiltrosPortatiles.getInstancia().checkRazer.isSelected())
            marcasSeleccionadas.add("Razer");
        if (InterfazPanelFiltrosTorres.getInstancia().checkHp.isSelected())
            marcasSeleccionadas.add("HP");
        if (InterfazPanelFiltrosTorres.getInstancia().checkPcWor.isSelected())
            marcasSeleccionadas.add("PcWor");
        if (InterfazPanelFiltrosTorres.getInstancia().checkMsi.isSelected())
            marcasSeleccionadas.add("MSI");
        if(marcasSeleccionadas.isEmpty())
        {
            if(checkAscendente.isSelected())
            {
                sql += " ORDER BY precioProducto ASC";
            }else if(checkDescendente.isSelected())
            {
                sql += "ORDER BY precioProducto DESC";
            }
            pstmtProducto = cn.prepareStatement(sql);
            pstmtProducto.setString(1, tipoMostrarProducto);
            pstmtProducto.setDouble(2, minimoPrecio);
            pstmtProducto.setDouble(3, maximoPrecio);
            pstmtProducto.setString(4, "0");
        }
        else
        {
            // Construir la consulta SQL dinámica
            StringBuilder consulta = new StringBuilder(sql + " AND (");
            for (int i = 0; i < marcasSeleccionadas.size(); i++) {
                consulta.append("IdNombre LIKE ?");
                if (i < marcasSeleccionadas.size() - 1) {
                    consulta.append(" OR ");
                }
            }
            if(checkAscendente.isSelected())
            {
                consulta.append(") ORDER BY precioProducto ASC");
            }else if(checkDescendente.isSelected())
            {
                consulta.append(") ORDER BY precioProducto DESC");
            }else
            {
                consulta.append(")");
            }

            // Preparar la consulta
            pstmtProducto = cn.prepareStatement(consulta.toString());
            pstmtProducto.setString(1, tipoMostrarProducto);
            pstmtProducto.setDouble(2, minimoPrecio);
            pstmtProducto.setDouble(3, maximoPrecio);
            pstmtProducto.setString(4, "0");
            // Establecer los parámetros de la consulta
            for (int i = 0; i < marcasSeleccionadas.size(); i++) {
                pstmtProducto.setString(i + 5, "%" + marcasSeleccionadas.get(i) + "%");
            }
        }
        // Ejecutar la consulta y devolver el resultado
        return pstmtProducto.executeQuery();
    }
    
    public ResultSet cargarProductosSegunFiltroMarca(Connection cn, String nombre) throws SQLException 
    {
        String minimoPrecioTexto = labelMinimoPrecio.getText();
        String maximoPrecioTexto = labelMaximoPrecio.getText();

        // Eliminar caracteres no numéricos
        String minimoPrecioNumerico = minimoPrecioTexto.replaceAll("[^\\d]", "");
        String maximoPrecioNumerico = maximoPrecioTexto.replaceAll("[^\\d]", "");

        // Convertir los strings numéricos a double
        double minimoPrecio = Double.parseDouble(minimoPrecioNumerico);
        double maximoPrecio = Double.parseDouble(maximoPrecioNumerico);

        // Preparar la consulta SQL
        String sql = "SELECT * FROM productos WHERE (`IdNombre` = ?) AND (`precioProducto` BETWEEN ? AND ?) AND `oculto` = ?";
        PreparedStatement pstmtProducto = cn.prepareStatement(sql);
        pstmtProducto.setString(1, nombre);
        pstmtProducto.setDouble(2, minimoPrecio);
        pstmtProducto.setDouble(3, maximoPrecio);
        pstmtProducto.setString(4, "0");

        // Ejecutar la consulta y devolver el resultado
        return pstmtProducto.executeQuery();
    }
    
    public ResultSet cargarProductosSegunFiltroMarcaNombre(Connection cn, String nombre) throws SQLException 
    {
        String minimoPrecioTexto = labelMinimoPrecio.getText();
        String maximoPrecioTexto = labelMaximoPrecio.getText();

        // Eliminar caracteres no numéricos
        String minimoPrecioNumerico = minimoPrecioTexto.replaceAll("[^\\d]", "");
        String maximoPrecioNumerico = maximoPrecioTexto.replaceAll("[^\\d]", "");

        // Convertir los strings numéricos a double
        double minimoPrecio = Double.parseDouble(minimoPrecioNumerico);
        double maximoPrecio = Double.parseDouble(maximoPrecioNumerico);

        // Preparar la consulta SQL
        String sql = "SELECT * FROM productos WHERE (`IdNombre` LIKE ?) AND (`precioProducto` BETWEEN ? AND ?) AND `oculto` = ?";
        PreparedStatement pstmtProducto = cn.prepareStatement(sql);
        pstmtProducto.setString(1, "%" + nombre + "%");
        pstmtProducto.setDouble(2, minimoPrecio);
        pstmtProducto.setDouble(3, maximoPrecio);
        pstmtProducto.setString(4, "0");

        // Ejecutar la consulta y devolver el resultado
        return pstmtProducto.executeQuery();
    }

    public ResultSet cargarProductosExcluyendoTipos(Connection cn) throws SQLException 
    {
        String sql = "SELECT * FROM productos WHERE (`tipoProducto` NOT IN (?, ?)) AND `oculto` = ?";
        
        if (checkAscendente.isSelected()) {
            sql += " ORDER BY precioProducto ASC";
        } else if (checkDescendente.isSelected()) {
            sql += " ORDER BY precioProducto DESC";
        }
        PreparedStatement pstmtProducto = cn.prepareStatement(sql);
        pstmtProducto.setString(1, "Torre");
        pstmtProducto.setString(2, "Portatil");
        pstmtProducto.setString(3, "0");
        return pstmtProducto.executeQuery();
    }
    
    public ResultSet cargarProductosExcluyendoTiposyPrecios(Connection cn) throws SQLException 
    {
        String minimoPrecioTexto = labelMinimoPrecio.getText();
        String maximoPrecioTexto = labelMaximoPrecio.getText();

        // Eliminar caracteres no numéricos
        String minimoPrecioNumerico = minimoPrecioTexto.replaceAll("[^\\d]", "");
        String maximoPrecioNumerico = maximoPrecioTexto.replaceAll("[^\\d]", "");

        // Convertir los strings numéricos a double
        double minimoPrecio = Double.parseDouble(minimoPrecioNumerico);
        double maximoPrecio = Double.parseDouble(maximoPrecioNumerico);
        
        String sql = "SELECT * FROM productos WHERE (`tipoProducto` NOT IN (?, ?)) AND (`precioProducto` BETWEEN ? AND ?) AND `oculto` = ?";
        PreparedStatement pstmtProducto = null;
        
        ArrayList<String> tiposSeleccionados = new ArrayList<>();
        if (InterfazPanelFiltrosComponentes.getInstancia().checkCPU.isSelected()) 
            tiposSeleccionados.add("CPU");
        if (InterfazPanelFiltrosComponentes.getInstancia().checkDiscoDuro.isSelected()) 
            tiposSeleccionados.add("Disco duro");
        if (InterfazPanelFiltrosComponentes.getInstancia().checkFuenteAlimentacion.isSelected()) 
            tiposSeleccionados.add("Fuente alimentación");
        if (InterfazPanelFiltrosComponentes.getInstancia().checkRam.isSelected()) 
            tiposSeleccionados.add("Memoria RAM");
        if (InterfazPanelFiltrosComponentes.getInstancia().checkPlacaBase.isSelected()) 
            tiposSeleccionados.add("Placa base");
        if (InterfazPanelFiltrosComponentes.getInstancia().checkRefrigeracion.isSelected()) 
            tiposSeleccionados.add("Refrigeracion");
        if (InterfazPanelFiltrosComponentes.getInstancia().checkTarjetaGrafica.isSelected()) 
            tiposSeleccionados.add("Tarjeta Grafica");
        if(tiposSeleccionados.isEmpty())
        {
            if(checkAscendente.isSelected())
            {
                sql += " ORDER BY precioProducto ASC";
            }else if(checkDescendente.isSelected())
            {
                sql += "ORDER BY precioProducto DESC";
            }
            pstmtProducto = cn.prepareStatement(sql);
            pstmtProducto.setString(1, "Torre");
            pstmtProducto.setString(2, "Portatil");
            pstmtProducto.setDouble(3, minimoPrecio);
            pstmtProducto.setDouble(4, maximoPrecio);
            pstmtProducto.setString(5, "0");
        }
        else{
            // Construir la consulta SQL dinámica
            StringBuilder consulta = new StringBuilder(sql + " AND (");
            for (int i = 0; i < tiposSeleccionados.size(); i++) {
                consulta.append("tipoProducto = ?");
                if (i < tiposSeleccionados.size() - 1) {
                    consulta.append(" OR ");
                }
            }
            if(checkAscendente.isSelected())
            {
                consulta.append(") ORDER BY precioProducto ASC");
            }else if(checkDescendente.isSelected())
            {
                consulta.append(") ORDER BY precioProducto DESC");
            }else
            {
                consulta.append(")");
            }

            // Preparar la consulta
            pstmtProducto = cn.prepareStatement(consulta.toString());
            pstmtProducto.setString(1, "Torre");
            pstmtProducto.setString(2, "Portatil");
            pstmtProducto.setDouble(3, minimoPrecio);
            pstmtProducto.setDouble(4, maximoPrecio);
            pstmtProducto.setString(5, "0");

            // Establecer los parámetros de la consulta
            for (int i = 0; i < tiposSeleccionados.size(); i++) {
                pstmtProducto.setString(i + 6, tiposSeleccionados.get(i));
            }
        }
        return pstmtProducto.executeQuery();
    }

    public Producto crearProductoDesdeResultSet(ResultSet rs, String rutaImagenPortada) throws SQLException 
    {
        String nombre = rs.getString("IdNombre");
        double precio = rs.getDouble("precioProducto");
        String imagen = rutaImagenPortada + rs.getString("Imagen1Producto").replace("/", File.separator);
        return new Producto(nombre, precio, imagen);
    }
    
    public void actualizarValoresSliders(int precio) 
    {
        if (minimoPrecio > precio) 
        {
            minimoPrecio = precio;
            MIN_VALUE = minimoPrecio;
            sliderMinimoPrecio.setOrientation(JSlider.HORIZONTAL);
            sliderMinimoPrecio.setMinimum(MIN_VALUE);
            sliderMinimoPrecio.setValue(MIN_VALUE);
            sliderMaximoPrecio.setOrientation(JSlider.HORIZONTAL);
            sliderMaximoPrecio.setMinimum(MIN_VALUE);
        }
        if (maximoPrecio < precio) 
        {
            maximoPrecio = precio + 1;
            MAX_VALUE = maximoPrecio;
            sliderMinimoPrecio.setOrientation(JSlider.HORIZONTAL);
            sliderMinimoPrecio.setMaximum(MAX_VALUE);
            sliderMaximoPrecio.setOrientation(JSlider.HORIZONTAL);
            sliderMaximoPrecio.setMaximum(MAX_VALUE);
            sliderMaximoPrecio.setValue(MAX_VALUE);
        }
        sliderMinimoPrecio.setMaximum(MAX_VALUE - 1);
        sliderMaximoPrecio.setMinimum(MIN_VALUE + 1);
    }
    
    public void crearPanelYActualizarInterfaz(Producto producto) 
    {
        crearPanelProducto(producto);
        panelProductos.revalidate();
        panelProductos.repaint();
    }

    public void cargarProductosDesdeBD()
    {
        minimoPrecio = 9999;
        maximoPrecio = 1;
        try {
            String rutaImagenPortada = "Imagenes" + File.separator + "Portada" + File.separator;
            Connection cn = conectarBD();

            ResultSet rsProducto;
            if (InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Portatil")) {
                rsProducto = cargarProductosSegunTipo(cn, InterfazPrincipal.getInstancia().tipoMostrarProducto);
            } 
            else if (InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Torre"))
            {
                rsProducto = cargarProductosSegunTipo(cn, InterfazPrincipal.getInstancia().tipoMostrarProducto);
            } 
            else if (!InterfazPrincipal.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunNombre(cn, InterfazPrincipal.getInstancia().campoBusqueda.getText());
            } 
            else if (!InterfazProducto.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunNombre(cn, InterfazProducto.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazCesta.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunNombre(cn, InterfazCesta.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazListaDeseos.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunNombre(cn, InterfazListaDeseos.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazConfiguradorPcs.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunNombre(cn, InterfazConfiguradorPcs.getInstancia().campoBusqueda.getText());
            }
            else if (!campoBusqueda.getText().equals("   Buscar...") && !(campoBusqueda.getText().toLowerCase().equals("componentes") || campoBusqueda.getText().toLowerCase().equals("componente")))
            {
                rsProducto = cargarProductosSegunNombre(cn, campoBusqueda.getText());
            }
            else {
                rsProducto = cargarProductosExcluyendoTipos(cn);
            }

            while (rsProducto.next())
            {
                Producto producto = crearProductoDesdeResultSet(rsProducto, rutaImagenPortada);
                actualizarValoresSliders((int) producto.getPrecio());
                crearPanelYActualizarInterfaz(producto);
            }

            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } 
    }
    
    private void crearPanelProducto(Producto producto) 
    {
        JPanel panelProducto = new JPanel();
        JPanel panelFotoProducto1 = new JPanel();
        JLabel imagen1 = new JLabel();
        JPanel panelNombreProducto1 = new JPanel();
        JTextArea areaNombreProducto1 = new JTextArea();
        JLabel labelPrecioProducto1 = new JLabel();
        
        // Configuración de panelProducto1
        panelProducto.setBackground(new java.awt.Color(70,123,69));
        panelProducto.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) 
            {
                InterfazProducto.getInstancia().cargarProducto(areaNombreProducto1.getText());
                InterfazProducto.getInstancia().setVisible(true);
                cerrar(); 
                InterfazProducto.getInstancia().panelPrincipal.requestFocusInWindow();
            }
        });

        // Configuración de panelFotoProducto1
        panelFotoProducto1.setBackground(new java.awt.Color(255, 255, 255));
        panelNombreProducto1.setBackground(new java.awt.Color(255, 255, 255));
        imagen1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout panelFotoProducto1Layout = new javax.swing.GroupLayout(panelFotoProducto1);
        panelFotoProducto1.setLayout(panelFotoProducto1Layout);
        panelFotoProducto1Layout.setHorizontalGroup(
            panelFotoProducto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagen1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelFotoProducto1Layout.setVerticalGroup(
            panelFotoProducto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagen1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        // Configuración de panelNombreProducto1
        panelNombreProducto1.setLayout(new javax.swing.BoxLayout(panelNombreProducto1, javax.swing.BoxLayout.Y_AXIS));

        // Configuración de areaNombreProducto1
        areaNombreProducto1.setEditable(false);
        areaNombreProducto1.setColumns(20);
        areaNombreProducto1.setFont(new java.awt.Font("Arial", 0, 12));
        areaNombreProducto1.setForeground(new java.awt.Color(0, 0, 0));
        areaNombreProducto1.setLineWrap(true);
        areaNombreProducto1.setRows(3);
        areaNombreProducto1.setWrapStyleWord(true);
        areaNombreProducto1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        areaNombreProducto1.setFocusable(false);

        // Configuración de labelPrecioProducto1
        labelPrecioProducto1.setFont(new java.awt.Font("Arial", 1, 16));
        labelPrecioProducto1.setForeground(new java.awt.Color(255, 0, 0));
        labelPrecioProducto1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelPrecioProducto1.setText("   ");
        
        javax.swing.GroupLayout panelNombreProducto1Layout = new javax.swing.GroupLayout(panelNombreProducto1);
        panelNombreProducto1.setLayout(panelNombreProducto1Layout);
        panelNombreProducto1Layout.setHorizontalGroup(
            panelNombreProducto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNombreProducto1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelPrecioProducto1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(panelNombreProducto1Layout.createSequentialGroup()
                .addComponent(areaNombreProducto1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelNombreProducto1Layout.setVerticalGroup(
            panelNombreProducto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNombreProducto1Layout.createSequentialGroup()
                .addComponent(areaNombreProducto1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelPrecioProducto1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );                                                                                                                                                                                                                                          
        
        // Configuración de panelProducto1Layout
        javax.swing.GroupLayout panelProducto1Layout = new javax.swing.GroupLayout(panelProducto);
        panelProducto.setLayout(panelProducto1Layout);
        panelProducto1Layout.setHorizontalGroup(
            panelProducto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProducto1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProducto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelNombreProducto1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelFotoProducto1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelProducto1Layout.setVerticalGroup(
            panelProducto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProducto1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelFotoProducto1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelNombreProducto1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE) // Establece un tamaño fijo para panelNombreProducto1
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) // Mantén el tamaño predeterminado del contenedor
        );
        
        
        imagen1.setIcon(new javax.swing.ImageIcon(producto.getImagen()));
        areaNombreProducto1.setText(producto.getNombre());
        DecimalFormat df = new DecimalFormat("#,###,###.##");
        String subTotalFormateado = df.format(producto.getPrecio());
        labelPrecioProducto1.setText(subTotalFormateado + " €    ");
        
        // Agregar borde al panelProducto
        Border border = BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1);
        panelProducto.setBorder(border);
        
        // Agregar el panelProducto a la primera columna del panelPrueba
        panelProductos.add(panelProducto);
    }
    
    private void campoBusquedaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_campoBusquedaFocusGained
        if(campoBusqueda.getText().equals("   Buscar..."))
        {
            campoBusqueda.setText("");
        }
    }//GEN-LAST:event_campoBusquedaFocusGained

    private void campoBusquedaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_campoBusquedaFocusLost
        if(campoBusqueda.getText().equals(""))
        {
            campoBusqueda.setText("   Buscar...");
        }
    }//GEN-LAST:event_campoBusquedaFocusLost

    private void campoBusquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoBusquedaKeyReleased

        try {
            // Establecer la conexión a la base de datos
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");

            // Verificar si el texto de búsqueda no está vacío
            if (!campoBusqueda.getText().trim().isEmpty()) {
                // Consulta SQL para obtener todos los productos que contienen la cadena de búsqueda
                String queryProducto = "SELECT * FROM productos WHERE `IdNombre` LIKE ? AND `oculto` = ?";
                PreparedStatement pstmtProducto = cn.prepareStatement(queryProducto);
                pstmtProducto.setString(1, "%" + campoBusqueda.getText().trim() + "%"); // Utiliza % para buscar coincidencias parciales
                pstmtProducto.setString(2, "0");
                ResultSet rsProducto = pstmtProducto.executeQuery();

                popupMenu = new JPopupMenu();

                // Establecer el máximo de filas para el PopupMenu
                int maxRows = 5;
                int rowCount = 0;

                // Iterar sobre los resultados de la consulta y agregar elementos al PopupMenu
                while (rsProducto.next() && rowCount < maxRows) {
                    String nombreProducto = rsProducto.getString("IdNombre"); // Reemplaza "nombre_producto" con el nombre real del campo en tu base de datos
                    JMenuItem menuItem = new JMenuItem(nombreProducto);
                    menuItem.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            productoUser = true;
                            InterfazProducto.getInstancia().cargarProducto(nombreProducto);
                            InterfazProducto.getInstancia().panelPrincipal.requestFocusInWindow();
                            InterfazProducto.getInstancia().setVisible(true);
                            campoBusqueda.setText("");
                            cerrar(); 
                        }
                    });
                    popupMenu.add(menuItem);
                    rowCount++;
                }
                // Establecer el ancho del PopupMenu para que coincida con el ancho del TextField
                popupMenu.setPreferredSize(new Dimension(campoBusqueda.getWidth() + botonLupa.getWidth(), popupMenu.getPreferredSize().height));

                // Mostrar el PopupMenu en la ubicación del campo de búsqueda
                popupMenu.show(campoBusqueda, 0, campoBusqueda.getHeight());

                // Mantener el foco en el TextField
                campoBusqueda.requestFocusInWindow();
            }
            cn.close();
        } catch(Exception e) {
            System.out.println("Error: " + e);
        }

    }//GEN-LAST:event_campoBusquedaKeyReleased

    private void botonLupaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonLupaMousePressed
        botonLupa.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "lupaRelleno.png"));
    }//GEN-LAST:event_botonLupaMousePressed

    private void botonLupaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonLupaMouseReleased
        botonLupa.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "lupa.png"));
    }//GEN-LAST:event_botonLupaMouseReleased

    public static void cambiarFondo(Color color) 
    {
        InterfazPanelFiltrosComponentes.getInstancia().checkCPU.setBackground(color);
        InterfazPanelFiltrosComponentes.getInstancia().checkDiscoDuro.setBackground(color);
        InterfazPanelFiltrosComponentes.getInstancia().checkFuenteAlimentacion.setBackground(color);
        InterfazPanelFiltrosComponentes.getInstancia().checkPlacaBase.setBackground(color);
        InterfazPanelFiltrosComponentes.getInstancia().checkRam.setBackground(color);
        InterfazPanelFiltrosComponentes.getInstancia().checkRefrigeracion.setBackground(color);
        InterfazPanelFiltrosComponentes.getInstancia().checkTarjetaGrafica.setBackground(color);
        
        InterfazPanelFiltrosNombres.getInstancia().checkCPU.setBackground(color);
        InterfazPanelFiltrosNombres.getInstancia().checkDiscoDuro.setBackground(color);
        InterfazPanelFiltrosNombres.getInstancia().checkFuenteAlimentacion.setBackground(color);
        InterfazPanelFiltrosNombres.getInstancia().checkPlacaBase.setBackground(color);
        InterfazPanelFiltrosNombres.getInstancia().checkRam.setBackground(color);
        InterfazPanelFiltrosNombres.getInstancia().checkRefrigeracion.setBackground(color);
        InterfazPanelFiltrosNombres.getInstancia().checkTarjetaGrafica.setBackground(color);
        InterfazPanelFiltrosNombres.getInstancia().checkPortatil.setBackground(color);
        InterfazPanelFiltrosNombres.getInstancia().checkTorre.setBackground(color);
        
        InterfazPanelFiltrosPortatiles.getInstancia().checkAcer.setBackground(color);
        InterfazPanelFiltrosPortatiles.getInstancia().checkAlurin.setBackground(color);
        InterfazPanelFiltrosPortatiles.getInstancia().checkAsus.setBackground(color);
        InterfazPanelFiltrosPortatiles.getInstancia().checkDell.setBackground(color);
        InterfazPanelFiltrosPortatiles.getInstancia().checkLenovo.setBackground(color);
        InterfazPanelFiltrosPortatiles.getInstancia().checkMsi.setBackground(color);
        InterfazPanelFiltrosPortatiles.getInstancia().checkRazer.setBackground(color);
        
        InterfazPanelFiltrosTorres.getInstancia().checkMsi.setBackground(color);
        InterfazPanelFiltrosTorres.getInstancia().checkHp.setBackground(color);
        InterfazPanelFiltrosTorres.getInstancia().checkPcWor.setBackground(color);
    }
    
    private void botonCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCuentaActionPerformed
        if(botonCuenta.getText().equals("Cuenta"))
        new InterfazLogin().setVisible(true);
        else
        {
            popUpMenu = new JPopupMenu();

            Font fontNegrita = new Font("Arial", Font.BOLD, 14);
            Font fontNormal = new Font("Arial", Font.PLAIN, 11);

            Color colorNegro = Color.BLACK;
            Color colorGris = Color.GRAY;

            Color colorFondo = new Color(255, 255, 255);
            popUpMenu.setBackground(colorFondo);

            JLabel labelMiCuenta = new JLabel("Mi cuenta");
            labelMiCuenta.setFont(fontNegrita);
            labelMiCuenta.setForeground(colorNegro);
            labelMiCuenta.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "cuenta.png"));

            JMenuItem misDatos = new JMenuItem("Mis datos");
            misDatos.setFont(fontNormal);
            misDatos.setForeground(colorGris);
            misDatos.setBackground(colorFondo);

            JMenuItem listaDeseos = new JMenuItem("Lista de deseos");
            listaDeseos.setFont(fontNormal);
            listaDeseos.setForeground(colorGris);
            listaDeseos.setBackground(colorFondo);

            JMenuItem configuracion = new JMenuItem("Configuración");
            configuracion.setFont(fontNormal);
            configuracion.setForeground(colorGris);
            configuracion.setBackground(colorFondo);

            JLabel labelMisPedidos = new JLabel("Mis pedidos");
            labelMisPedidos.setFont(fontNegrita);
            labelMisPedidos.setForeground(colorNegro);
            labelMisPedidos.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "pedidos.png"));

            JMenuItem pedidosFacturas;
            if(botonCuenta.getText().equals("Admin"))
                pedidosFacturas = new JMenuItem("Pedidos clientes");
            else
                pedidosFacturas = new JMenuItem("Pedidos y facturas");
            pedidosFacturas.setFont(fontNormal);
            pedidosFacturas.setForeground(colorGris);
            pedidosFacturas.setBackground(colorFondo);

            JLabel labelEspacio = new JLabel("            ");
            labelEspacio.setFont(fontNormal);
            labelEspacio.setForeground(colorGris);
            labelEspacio.setBackground(colorFondo);

            JMenuItem atenciónCliente = new JMenuItem("Atención al cliente");
            atenciónCliente.setFont(fontNegrita);
            atenciónCliente.setForeground(colorNegro);
            atenciónCliente.setBackground(colorFondo);
            atenciónCliente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "atCliente.png"));

            JMenuItem cerrarSesión = new JMenuItem("Cerrar sesión");
            cerrarSesión.setFont(fontNegrita);
            cerrarSesión.setForeground(colorNegro);
            cerrarSesión.setBackground(colorFondo);
            cerrarSesión.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "logout.png"));

            misDatos.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    new InterfazMisDatos();
                }
            });
            listaDeseos.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    try {
                        // Establecer la conexión a la base de datos
                        Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");

                        String queryCliente = "SELECT * FROM lista_deseos WHERE `IdCliente` = ?";
                        PreparedStatement pstmtCliente = cn.prepareStatement(queryCliente);
                        pstmtCliente.setString(1, botonCuenta.getText());

                        ResultSet rsCliente = pstmtCliente.executeQuery();

                        if(rsCliente.next())
                        {
                            InterfazListaDeseos.getInstancia().setVisible(true);
                            InterfazListaDeseos.getInstancia().panelPrueba = null;
                            InterfazListaDeseos.getInstancia().panelPrueba = new JPanel(new GridLayout(0,1));
                            InterfazListaDeseos.getInstancia().scrollPane.setViewportView(InterfazListaDeseos.getInstancia().panelPrueba);
                            InterfazListaDeseos.getInstancia().cargarProductosDesdeBD();
                            InterfazListaDeseos.getInstancia().scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
                            InterfazListaDeseos.getInstancia().scrollPane.setViewportView(InterfazListaDeseos.getInstancia().panelPrueba);
                            InterfazListaDeseos.getInstancia().panelPrincipal.requestFocusInWindow();
                            // Obtener la vista del JViewport
                            JViewport viewport = InterfazListaDeseos.getInstancia().scrollPane.getViewport();

                            // Establecer la posición de la vista en la parte superior
                            SwingUtilities.invokeLater(() -> {
                                viewport.setViewPosition(new Point(0, 0));
                            });
                            cerrar();
                        }else
                        {
                            new ErrorListaDeseosSinProductos();
                        }
                        cn.close();
                    } catch(Exception e1) {
                        System.out.println("Error: " + e1);
                    }
                }
            });
            configuracion.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    // Cambiar el color de fondo
                    Color color = JColorChooser.showDialog(InterfazMostrarProductos.this, "Selecciona un color", panelProductos.getBackground());
                    if (color != null) 
                    {
                        //INTERFAZ PRINCIPAL
                        panelPrincipal.setBackground(color);
                        panelProductos.setBackground(color);
                        panelFiltros.setBackground(color);
                        panelFiltrosPers.setBackground(color);
                        panelOrdenar.setBackground(color);
                        sliderMinimoPrecio.setBackground(color);
                        sliderMaximoPrecio.setBackground(color);
                        InterfazPanelFiltrosComponentes.getInstancia().panelPrincipal.setBackground(color);
                        InterfazPanelFiltrosNombres.getInstancia().panelPrincipal.setBackground(color);
                        InterfazPanelFiltrosPortatiles.getInstancia().panelPrincipal.setBackground(color);
                        InterfazPanelFiltrosTorres.getInstancia().panelPrincipal.setBackground(color);
                        checkDescendente.setBackground(color);
                        checkAscendente.setBackground(color);
                        cambiarFondo(color);
                        JOptionPane.showMessageDialog(InterfazMostrarProductos.this, "Color de fondo actualizado");
                    }
                }
            });
            pedidosFacturas.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if(!botonCuenta.getText().equals("Admin"))
                    {
                        try {
                            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");

                            String queryPedido = "SELECT * FROM pedidos WHERE `Usuario` = ?";
                            PreparedStatement pstmtPedido = cn.prepareStatement(queryPedido);
                            pstmtPedido.setString(1, botonCuenta.getText());

                            ResultSet rsPedido = pstmtPedido.executeQuery();
                            if(rsPedido.next())
                            {
                                new InterfazElegirPedido().setVisible(true);
                            }else
                            {
                                new ErrorSinPedidos();
                            }
                            cn.close();
                        } catch (SQLException ex) {
                            System.out.println("Error: " + e);
                        }
                    }
                    else
                    {
                        new InterfazElegirPedido().setVisible(true);
                    }
                }
            });
            atenciónCliente.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if(botonCuenta.getText().equals("Admin"))
                    {
                        new InterfazElegirChat();
                    }else
                    {
                        InterfazAtencionCliente.crearNuevaInstancia();
                    }
                }
            });
            cerrarSesión.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    botonCuenta.setText("Cuenta");
                    InterfazProducto.getInstancia().botonCuenta.setText("Cuenta");
                    InterfazCesta.getInstancia().botonCuenta.setText("Cuenta");
                    InterfazPrincipal.getInstancia().botonCuenta.setText("Cuenta");
                }
            });

            popUpMenu.add(labelMiCuenta);
            popUpMenu.add(misDatos);
            popUpMenu.add(listaDeseos);
            if(botonCuenta.getText().equals("Admin"))
                popUpMenu.add(configuracion);
            popUpMenu.add(labelMisPedidos);
            popUpMenu.add(pedidosFacturas);
            popUpMenu.add(labelEspacio);
            popUpMenu.add(atenciónCliente);
            popUpMenu.add(cerrarSesión);

            popUpMenu.show(botonCuenta, -30, botonCuenta.getHeight() + 3);
        }
    }//GEN-LAST:event_botonCuentaActionPerformed

    private void botonListaDeseosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonListaDeseosMousePressed
        botonListaDeseos.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "listaDeseosRelleno.png"));
    }//GEN-LAST:event_botonListaDeseosMousePressed

    private void botonListaDeseosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonListaDeseosMouseReleased
        botonListaDeseos.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "listaDeseos.png"));
    }//GEN-LAST:event_botonListaDeseosMouseReleased

    private void botonListaDeseosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListaDeseosActionPerformed
        if(!this.botonCuenta.getText().equals("Cuenta"))
        {
            try {
                // Establecer la conexión a la base de datos
                Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");

                String queryCliente = "SELECT * FROM lista_deseos WHERE `IdCliente` = ?";
                PreparedStatement pstmtCliente = cn.prepareStatement(queryCliente);
                pstmtCliente.setString(1, botonCuenta.getText());

                ResultSet rsCliente = pstmtCliente.executeQuery();

                if(rsCliente.next())
                {
                    InterfazListaDeseos.getInstancia().setVisible(true);
                    InterfazListaDeseos.getInstancia().panelPrueba = null;
                    InterfazListaDeseos.getInstancia().panelPrueba = new JPanel(new GridLayout(0,1));
                    InterfazListaDeseos.getInstancia().scrollPane.setViewportView(InterfazListaDeseos.getInstancia().panelPrueba);
                    InterfazListaDeseos.getInstancia().cargarProductosDesdeBD();
                    InterfazListaDeseos.getInstancia().scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
                    InterfazListaDeseos.getInstancia().scrollPane.setViewportView(InterfazListaDeseos.getInstancia().panelPrueba);
                    InterfazListaDeseos.getInstancia().panelPrincipal.requestFocusInWindow();
                    // Obtener la vista del JViewport
                    JViewport viewport = InterfazListaDeseos.getInstancia().scrollPane.getViewport();

                    // Establecer la posición de la vista en la parte superior
                    SwingUtilities.invokeLater(() -> {
                        viewport.setViewPosition(new Point(0, 0));
                    });
                    cerrar(); 
                }else
                {
                    new ErrorListaDeseosSinProductos();
                }
                cn.close();
            } catch(Exception e) {
                System.out.println("Error: " + e);
            }
        }else
        {
            if(!error.isVisible()) error.setVisible(true);
        }
    }//GEN-LAST:event_botonListaDeseosActionPerformed

    private void botonCestaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonCestaMousePressed
        botonCesta.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "carritoRelleno.png"));
    }//GEN-LAST:event_botonCestaMousePressed

    private void botonCestaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonCestaMouseReleased
        botonCesta.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "carrito.png"));
    }//GEN-LAST:event_botonCestaMouseReleased

    private void botonCestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCestaActionPerformed
        if(!this.botonCuenta.getText().equals("Cuenta"))
        {
            InterfazCesta.getInstancia().panelProductos = null;
            InterfazCesta.getInstancia().panelProductos = new JPanel(new GridLayout(0,1));
            InterfazCesta.getInstancia().scrollPane.setViewportView(InterfazCesta.getInstancia().panelProductos);
            InterfazCesta.getInstancia().cargarProductosDesdeBD();
            InterfazCesta.getInstancia().noCargarProductosDesdeBD();
            InterfazCesta.getInstancia().scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
            InterfazCesta.getInstancia().scrollPane.setViewportView(InterfazCesta.getInstancia().panelProductos);

            // Obtener la vista del JViewport
            JViewport viewport = InterfazCesta.getInstancia().scrollPane.getViewport();

            // Establecer la posición de la vista en la parte superior
            SwingUtilities.invokeLater(() -> {
                viewport.setViewPosition(new Point(0, 0));
            });

            if(InterfazCesta.getInstancia().cliente)
            {
                InterfazCesta.getInstancia().setVisible(true);
                cerrar(); 
                InterfazCesta.getInstancia().cliente = false;
            }
            InterfazCesta.getInstancia().panelPrincipal.requestFocusInWindow();
        }else
        {
            if(!error.isVisible()) error.setVisible(true);
        }
    }//GEN-LAST:event_botonCestaActionPerformed

    private String formatPrice(int price) {
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(price) + "€";
    }
    
    private void labelLogoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLogoMouseClicked
        reiniciarBotonesAscDesc();
        InterfazPanelFiltrosPortatiles.getInstancia().checkAcer.setSelected(false);
        InterfazPanelFiltrosPortatiles.getInstancia().checkAlurin.setSelected(false);
        InterfazPanelFiltrosPortatiles.getInstancia().checkAsus.setSelected(false);
        InterfazPanelFiltrosPortatiles.getInstancia().checkDell.setSelected(false);
        InterfazPanelFiltrosPortatiles.getInstancia().checkLenovo.setSelected(false);
        InterfazPanelFiltrosPortatiles.getInstancia().checkMsi.setSelected(false);
        InterfazPanelFiltrosPortatiles.getInstancia().checkRazer.setSelected(false);
        InterfazPanelFiltrosTorres.getInstancia().checkHp.setSelected(false);
        InterfazPanelFiltrosTorres.getInstancia().checkPcWor.setSelected(false);
        InterfazPanelFiltrosTorres.getInstancia().checkMsi.setSelected(false);
        InterfazPrincipal.getInstancia().campoBusqueda.setText("   Buscar...");
        InterfazPrincipal.getInstancia().setVisible(true);
        InterfazPrincipal.getInstancia().panelPrincipal.requestFocusInWindow();
        cerrar();     
    }//GEN-LAST:event_labelLogoMouseClicked

    private void sliderMinimoPrecioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMinimoPrecioStateChanged
        minimoPrecio = sliderMinimoPrecio.getValue();
        labelMinimoPrecio.setText(formatPrice(minimoPrecio));
        if (minimoPrecio > maximoPrecio) 
        {
            sliderMaximoPrecio.setValue(minimoPrecio);
        }
    }//GEN-LAST:event_sliderMinimoPrecioStateChanged

    private void sliderMaximoPrecioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMaximoPrecioStateChanged
        maximoPrecio = sliderMaximoPrecio.getValue();
        labelMaximoPrecio.setText(formatPrice(maximoPrecio));
        if (maximoPrecio < minimoPrecio) 
        {
            sliderMinimoPrecio.setValue(maximoPrecio);
        }
    }//GEN-LAST:event_sliderMaximoPrecioStateChanged

    public void scrollPaneArriba()
    {
        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setViewportView(panelProductos);

        // Obtener la vista del JViewport
        JViewport viewport = scrollPane.getViewport();

        // Establecer la posición de la vista en la parte superior
        SwingUtilities.invokeLater(() -> {
            viewport.setViewPosition(new Point(0, 0));
        });
    }
    
    private void sliderMinimoPrecioMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMinimoPrecioMouseReleased
        try {
            panelProductos = null;
            panelProductos = new JPanel(new GridLayout(0,3, 20,38));
            panelProductos.setBackground(Color.WHITE);
            String rutaImagenPortada = "Imagenes" + File.separator + "Portada" + File.separator;
            Connection cn = conectarBD();

            ResultSet rsProducto;
            if (InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Portatil")) {
                rsProducto = cargarProductosSegunPrecio(cn, InterfazPrincipal.getInstancia().tipoMostrarProducto);
            } 
            else if (InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Torre"))
            {
                rsProducto = cargarProductosSegunPrecio(cn, InterfazPrincipal.getInstancia().tipoMostrarProducto);
            } 
            else if (!InterfazPrincipal.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazPrincipal.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazProducto.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazProducto.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazCesta.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazCesta.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazListaDeseos.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazListaDeseos.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazConfiguradorPcs.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazConfiguradorPcs.getInstancia().campoBusqueda.getText());
            }
            else if (!campoBusqueda.getText().equals("   Buscar...") && !(campoBusqueda.getText().toLowerCase().equals("componentes") || campoBusqueda.getText().toLowerCase().equals("componente")))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, campoBusqueda.getText());
            }
            else {
                rsProducto = cargarProductosExcluyendoTiposyPrecios(cn);
            }

            while (rsProducto.next())
            {
                Producto producto = crearProductoDesdeResultSet(rsProducto, rutaImagenPortada);
                actualizarValoresSliders((int) producto.getPrecio());
                crearPanelYActualizarInterfaz(producto);
            }

            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } 
        scrollPaneArriba();
    }//GEN-LAST:event_sliderMinimoPrecioMouseReleased

    private void sliderMaximoPrecioMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMaximoPrecioMouseReleased
        try {
            panelProductos = null;
            panelProductos = new JPanel(new GridLayout(0,3, 20,38));
            panelProductos.setBackground(Color.WHITE);
            String rutaImagenPortada = "Imagenes" + File.separator + "Portada" + File.separator;
            Connection cn = conectarBD();

            ResultSet rsProducto;
            if (InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Portatil")) {
                rsProducto = cargarProductosSegunPrecio(cn, InterfazPrincipal.getInstancia().tipoMostrarProducto);
            } 
            else if (InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Torre"))
            {
                rsProducto = cargarProductosSegunPrecio(cn, InterfazPrincipal.getInstancia().tipoMostrarProducto);
            } 
            else if (!InterfazPrincipal.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazPrincipal.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazProducto.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazProducto.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazCesta.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazCesta.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazListaDeseos.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazListaDeseos.getInstancia().campoBusqueda.getText());
            }
            else if (!InterfazConfiguradorPcs.getInstancia().campoBusqueda.getText().equals("   Buscar..."))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, InterfazConfiguradorPcs.getInstancia().campoBusqueda.getText());
            }
            else if (!campoBusqueda.getText().equals("   Buscar...") && !(campoBusqueda.getText().toLowerCase().equals("componentes") || campoBusqueda.getText().toLowerCase().equals("componente")))
            {
                rsProducto = cargarProductosSegunPrecioNombre(cn, campoBusqueda.getText());
            }
            else {
                rsProducto = cargarProductosExcluyendoTiposyPrecios(cn);
            }

            while (rsProducto.next())
            {
                Producto producto = crearProductoDesdeResultSet(rsProducto, rutaImagenPortada);
                actualizarValoresSliders((int) producto.getPrecio());
                crearPanelYActualizarInterfaz(producto);
            }

            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } 
        scrollPaneArriba();
    }//GEN-LAST:event_sliderMaximoPrecioMouseReleased

    private void botonLupaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonLupaMouseClicked
        reiniciarBotonesAscDesc();
        panelFiltrosPers.removeAll();
        InterfazPrincipal.getInstancia().tipoMostrarProducto = "";
        InterfazPrincipal.getInstancia().interfazActual = "InterfazMostrarProductos";
        InterfazCesta.getInstancia().campoBusqueda.setText("   Buscar...");
        InterfazListaDeseos.getInstancia().campoBusqueda.setText("   Buscar...");
        InterfazProducto.getInstancia().campoBusqueda.setText("   Buscar...");
        InterfazPrincipal.getInstancia().campoBusqueda.setText("   Buscar...");
        InterfazConfiguradorPcs.getInstancia().campoBusqueda.setText("   Buscar...");
        busquedaProducto();
        popupMenu.setVisible(false);
        panelPrincipal.requestFocusInWindow();
    }//GEN-LAST:event_botonLupaMouseClicked

    private void campoBusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoBusquedaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            reiniciarBotonesAscDesc();
            panelFiltrosPers.removeAll();
            InterfazPrincipal.getInstancia().tipoMostrarProducto = "";
            InterfazPrincipal.getInstancia().interfazActual = "InterfazMostrarProductos";
            InterfazCesta.getInstancia().campoBusqueda.setText("   Buscar...");
            InterfazListaDeseos.getInstancia().campoBusqueda.setText("   Buscar...");
            InterfazProducto.getInstancia().campoBusqueda.setText("   Buscar...");
            InterfazPrincipal.getInstancia().campoBusqueda.setText("   Buscar...");
            InterfazConfiguradorPcs.getInstancia().campoBusqueda.setText("   Buscar...");
            busquedaProducto();
            popupMenu.setVisible(false);
            panelPrincipal.requestFocusInWindow();
        }
    }//GEN-LAST:event_campoBusquedaKeyPressed

    private void checkAscendenteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkAscendenteMouseClicked
        if (checkAscendente.isSelected()) 
        {
            if (checkDescendente.isSelected()) 
            {
                checkDescendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
                checkDescendente.setSelected(false);
            }             
            checkAscendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
            
        } else 
        {
            checkAscendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        }
        if(InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Torre"))
        {
            InterfazPanelFiltrosTorres.getInstancia().buscarFiltros();
        }
        else if(InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Componentes"))
        {
            InterfazPanelFiltrosComponentes.getInstancia().buscarFiltros();
        }
        else if(InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Portatil"))
        {
            InterfazPanelFiltrosPortatiles.getInstancia().buscarFiltros();
        }
        else
        {
            InterfazPanelFiltrosNombres.getInstancia().buscarFiltros();
        }
    }//GEN-LAST:event_checkAscendenteMouseClicked

    private void checkDescendenteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkDescendenteMouseClicked
        if (checkDescendente.isSelected()) 
        {
            if (checkAscendente.isSelected()) 
            {
                checkAscendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
                checkAscendente.setSelected(false);
            }
            checkDescendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "check.png"));
        } 
        else 
        {
            checkDescendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        }
        
        if(InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Torre"))
        {
            InterfazPanelFiltrosTorres.getInstancia().buscarFiltros();
        }
        else if(InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Componentes"))
        {
            InterfazPanelFiltrosComponentes.getInstancia().buscarFiltros();
        }
        else if(InterfazPrincipal.getInstancia().tipoMostrarProducto.equals("Portatil"))
        {
            InterfazPanelFiltrosPortatiles.getInstancia().buscarFiltros();
        }
        else
        {
            InterfazPanelFiltrosNombres.getInstancia().buscarFiltros();
        }
    }//GEN-LAST:event_checkDescendenteMouseClicked

    
    public void reiniciarBotonesAscDesc()
    {
        checkDescendente.setSelected(false);
        checkDescendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
        checkAscendente.setSelected(false);
        checkAscendente.setIcon(new javax.swing.ImageIcon("ImagenesDecoracion" + File.separator + "square.png"));
    }
    
    
    private void busquedaProducto()
    {
        reiniciarBotonesAscDesc();
        panelProductos = null;
        panelProductos = new JPanel(new GridLayout(0,3, 20,38));
        panelProductos.setBackground(Color.WHITE);
        panelFiltrosPers.removeAll();
        javax.swing.GroupLayout panelFiltrosPersLayout = new javax.swing.GroupLayout(panelFiltrosPers);
        
        if(campoBusqueda.getText().toLowerCase().equals("portatil") || campoBusqueda.getText().toLowerCase().equals("portátil") || campoBusqueda.getText().toLowerCase().equals("portatiles") || campoBusqueda.getText().toLowerCase().equals("portátiles"))
        {
            InterfazPrincipal.getInstancia().tipoMostrarProducto = "Portatil";
            panelFiltrosPers.add(InterfazPanelFiltrosPortatiles.crearNuevaInstancia().panelPrincipal);
        }
        else if (campoBusqueda.getText().toLowerCase().equals("torre") || campoBusqueda.getText().toLowerCase().equals("torres") || campoBusqueda.getText().toLowerCase().equals("pc") || campoBusqueda.getText().toLowerCase().equals("pcs"))
        {
            InterfazPrincipal.getInstancia().tipoMostrarProducto = "Torre";
            panelFiltrosPers.add(InterfazPanelFiltrosTorres.crearNuevaInstancia().panelPrincipal);
        }
        else if (campoBusqueda.getText().toLowerCase().equals("componentes") || campoBusqueda.getText().toLowerCase().equals("componente"))
        {
            InterfazPrincipal.getInstancia().tipoMostrarProducto = "Componentes";
            panelFiltrosPers.add(InterfazPanelFiltrosComponentes.crearNuevaInstancia().panelPrincipal);
        }
        else 
        {
            panelFiltrosPers.add(InterfazPanelFiltrosNombres.crearNuevaInstancia().panelPrincipal);
        }

        scrollPane.setViewportView(panelProductos);
        cargarProductosDesdeBD();
        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setViewportView(panelProductos);
        // Obtener la vista del JViewport
        JViewport viewport = scrollPane.getViewport();

        // Establecer la posición de la vista en la parte superior
        SwingUtilities.invokeLater(() -> {
            viewport.setViewPosition(new Point(0, 0));
        });
        setVisible(true);
        panelPrincipal.requestFocusInWindow();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCesta;
    public javax.swing.JButton botonCuenta;
    private javax.swing.JButton botonListaDeseos;
    private javax.swing.JButton botonLupa;
    public javax.swing.JTextField campoBusqueda;
    public javax.swing.JCheckBox checkAscendente;
    public javax.swing.JCheckBox checkDescendente;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelLogo;
    private javax.swing.JLabel labelMaximoPrecio;
    private javax.swing.JLabel labelMinimoPrecio;
    private javax.swing.JLabel labelTextoMaximo;
    private javax.swing.JLabel labelTextoMinimo;
    private javax.swing.JPanel panelBuscador;
    private javax.swing.JPanel panelCabecera;
    private javax.swing.JPanel panelCuerpo;
    private javax.swing.JPanel panelFiltros;
    public javax.swing.JPanel panelFiltrosPers;
    private javax.swing.JPanel panelFuncionalidades;
    private javax.swing.JPanel panelHome;
    private javax.swing.JPanel panelOrdenar;
    public javax.swing.JPanel panelPrincipal;
    private javax.swing.JPopupMenu popUpMenu;
    private javax.swing.JPopupMenu popupMenu;
    public javax.swing.JScrollPane scrollPane;
    public javax.swing.JSlider sliderMaximoPrecio;
    public javax.swing.JSlider sliderMinimoPrecio;
    // End of variables declaration//GEN-END:variables
    private static InterfazMostrarProductos instancia;
    public boolean productoUser;
    public javax.swing.JPanel panelProductos;
    private ErrorCesta error;
    private int MIN_VALUE;
    private int MAX_VALUE;
    private int minimoPrecio;
    private int maximoPrecio;
}
