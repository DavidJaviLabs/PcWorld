package src;

import ErroresInterfaz.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.border.LineBorder;


public class InterfazElegirChat extends javax.swing.JFrame  
{
    /**
     * Creates new form InterfazElegirChat
     */
    public InterfazElegirChat() 
    {
        panelChat = new JPanel(new GridLayout(0, 1, 20, 10));
        try 
        {
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");

            String sqlCount = "SELECT COUNT(*) AS total FROM atencion_cliente";
            PreparedStatement pstmtCount = cn.prepareStatement(sqlCount);
            ResultSet rs = pstmtCount.executeQuery(sqlCount);
            rs.next();
            int totalRegistros = rs.getInt("total");
            if (totalRegistros != 0)
            {
                initComponents();
                cargarChat();
                SwingUtilities.invokeLater(() -> {
                    jScrollPane1.getVerticalScrollBar().setValue(Math.max(0, 0));
                });
                setVisible(true); 
            }
            else
            {
                new ErrorNoChat();
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 397, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void cargarChat()
    {
        try
        {
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");
            String query = "SELECT DISTINCT Usuario, Destino, Mensaje " +
               "FROM atencion_cliente AS a " +
               "WHERE Fecha = ( " +
               "    SELECT MAX(Fecha) " +
               "    FROM atencion_cliente " +
               "    WHERE Usuario = a.Usuario " +
               "    AND Destino = a.Destino" +
               ") " +
               "AND (Usuario = ? AND Destino != ? OR Usuario != ? AND Destino = ?) " +
               "ORDER BY Fecha DESC";

            PreparedStatement pstmt = cn.prepareStatement(query);
            pstmt.setString(1, "Admin");
            pstmt.setString(2, "Admin");
            pstmt.setString(3, "Admin");
            pstmt.setString(4, "Admin");
            
            ResultSet rs = pstmt.executeQuery();
            ArrayList<Chat> clientes = new ArrayList<>();
            ArrayList<Chat> clientesaux = new ArrayList<>();
            ArrayList<Integer> num = new ArrayList<>();
            while(rs.next())
            {
                Chat chat = new Chat(rs.getString("Usuario"), rs.getString("Destino"),rs.getString("Mensaje"));
                clientes.add(chat);
            }
            for(int i = 0; i < clientes.size(); i++)
            {
                for(int j = 0; j < clientes.size(); j++)
                {
                    if(clientes.get(i).getUsuario().equals("Admin"))
                    {
                        if(clientes.get(i).getDestino().equals(clientes.get(j).getUsuario()))
                        {
                            if(i<j)
                            {
                                num.add(j);
                            }
                        }
                    }else
                    {
                        if(clientes.get(i).getUsuario().equals(clientes.get(j).getDestino()))
                        {
                            if(i<j)
                            {
                                num.add(j);
                            }
                        }
                    }
                }
            }
            boolean chats = true;
            for(int i = 0; i < clientes.size(); i++)
            {
                for(int j = 0; j < num.size(); j++)
                {
                    if(i != num.get(j))
                    {
                        if(j == (num.size()-1) && chats)
                            clientesaux.add(clientes.get(i));
                    }
                    else
                    {
                        chats = false;
                    }
                }
                chats = true;
            }
            if(clientesaux.size() > 0)
            {
                clientes = clientesaux;
            }
            
            for(int i = 0; i < clientes.size(); i++)
            {   
                JPanel subPanelChat = new JPanel(new GridBagLayout());
                
                subPanelChat.setSize(400, 100);
                subPanelChat.setBackground(Color.WHITE);
                subPanelChat.setBorder(new LineBorder(Color.BLACK, 2));
                JLabel nombreUsuario = new JLabel();
                nombreUsuario.setFont(new Font("Arial", Font.BOLD, 16));
                if(clientes.get(i).getUsuario().equals("Admin"))
                {
                    nombreUsuario.setText("  " + clientes.get(i).getDestino());
                }
                else
                {
                    nombreUsuario.setText("  " + clientes.get(i).getUsuario());
                }
                
                nombreUsuario.setPreferredSize(new Dimension(160, 25));
                
                JTextArea textAreaMensaje = new JTextArea();
                textAreaMensaje.setEditable(false);
                textAreaMensaje.setFocusable(false);
                textAreaMensaje.setForeground(Color.BLACK);
                textAreaMensaje.setSize(200,16);
                textAreaMensaje.setBorder(null);
                textAreaMensaje.setFont(new Font("Arial", Font.PLAIN, 12));

                // Obtener el mensaje
                String mensaje = clientes.get(i).getMensaje();

                // Verificar si el mensaje es demasiado largo
                if (mensaje.length() > 15) 
                {
                    mensaje = mensaje.substring(0, 15) + "...";
                }

                textAreaMensaje.setText("  " + mensaje);
                subPanelChat.addMouseListener(new MouseAdapter()
                {
                    @Override
                    public void mouseClicked(MouseEvent e) 
                    {
                        InterfazAtencionCliente.crearNuevaInstancia();
                        InterfazAtencionCliente.getInstancia().nombreUsuario = nombreUsuario.getText().trim();
                        InterfazAtencionCliente.getInstancia().mostrarChat(nombreUsuario.getText().trim());
                        InterfazAtencionCliente.getInstancia().setVisible(true);
                        dispose();
                    }
                });
                
                JLabel labelBasura = new JLabel(new ImageIcon("ImagenesDecoracion" + File.separator + "trash.png"));
                
                
                labelBasura.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        labelBasura.setIcon(new ImageIcon("ImagenesDecoracion" + File.separator + "trashRelleno.png"));
                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
                        labelBasura.setIcon(new ImageIcon("ImagenesDecoracion" + File.separator + "trash.png"));
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        try {
                            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pcworld", "pcworld", "pcworld2024");
                            String sql = "DELETE FROM atencion_cliente WHERE (`Usuario` = ? AND `Destino` = ?) OR (`Usuario` = ? AND `Destino` = ?)";
                            PreparedStatement pstmtProductos = cn.prepareStatement(sql);
                            pstmtProductos.setString(1, "Admin");
                            pstmtProductos.setString(2, nombreUsuario.getText().trim());
                            pstmtProductos.setString(3, nombreUsuario.getText().trim());
                            pstmtProductos.setString(4, "Admin");
                            pstmtProductos.executeUpdate();
                            
                            
                            String sqlCount = "SELECT COUNT(*) AS total FROM atencion_cliente";
                            PreparedStatement pstmtCount = cn.prepareStatement(sqlCount);
                            ResultSet rs = pstmtCount.executeQuery(sqlCount);
                            rs.next();
                            int totalRegistros = rs.getInt("total");
                            if (totalRegistros == 0)
                            {
                                
                                dispose(); // Cerrar la pestaña
                            }else
                            {
                                panelChat = null;
                                panelChat = new JPanel(new GridLayout(0, 1, 20, 10));

                                cargarChat();

                                cn.close();
                            }
                        } catch (SQLException ex) {
                            System.err.println("Error al eliminar el producto de la cesta: " + ex.getMessage());
                            ex.printStackTrace();
                        }
                        
                    }
                });

                labelBasura.setSize(40,40);
                labelBasura.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));
                labelBasura.setPreferredSize(new Dimension(35, 35));
                GridBagConstraints gbc = new GridBagConstraints();
                gbc.fill = GridBagConstraints.HORIZONTAL;
                gbc.gridx = 0;
                gbc.gridy = 0;
                gbc.insets = new Insets(0, -150, 10, 20);
                subPanelChat.add(nombreUsuario, gbc);
                
                gbc.gridx = 0;
                gbc.gridy = 1;
                gbc.insets = new Insets(20, -150, 0, 0);
                subPanelChat.add(textAreaMensaje, gbc);
                
                gbc.gridx = 1;
                gbc.gridy = 1;
                gbc.insets = new Insets(-50, 120, 0, -120);
                subPanelChat.add(labelBasura, gbc);
                
                panelChat.add(subPanelChat);
                jScrollPane1.setViewportView(panelChat);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    
    public class Chat 
    {
        private String usuario, destino, mensaje;

        public Chat(String usuario, String destino, String mensaje) {
            this.usuario = usuario;
            this.destino = destino;
            this.mensaje = mensaje;
        }

        public String getUsuario() 
        {
            return usuario;
        }

        public void setUsuario(String usuario) 
        {
            this.usuario = usuario;
        }

        public String getDestino() 
        {
            return destino;
        }

        public void setDestino(String destino) 
        {
            this.destino = destino;
        }

        public String getMensaje() 
        {
            return mensaje;
        }

        public void setMensaje(String mensaje) 
        {
            this.mensaje = mensaje;
        }
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private JPanel panelChat;
    
    
}


